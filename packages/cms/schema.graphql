# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Audio {
  id: ID!
  name: String
  file: FileFieldOutput
  url: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input AudioWhereUniqueInput {
  id: ID
}

input AudioWhereInput {
  AND: [AudioWhereInput!]
  OR: [AudioWhereInput!]
  NOT: [AudioWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioUpdateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AudioUpdateArgs {
  where: AudioWhereUniqueInput!
  data: AudioUpdateInput!
}

input AudioCreateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Video {
  id: ID!
  name: String
  file: FileFieldOutput
  url: String
  coverPhoto: Photo
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  resized: ResizedImages
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  tiny: String
  small: String
  medium: String
  large: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Asset {
  id: ID!
  name: String
  file: FileFieldOutput
  url: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AssetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AssetUpdateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Karaoke {
  id: ID!
  name: String
  webVtt: String
  quote: String
  quoteBy: String
  audio: FileFieldOutput
  muteHint: Boolean
  theme: String
  embedCode: String
  hintEmbedCode: String
}

input KaraokeWhereUniqueInput {
  id: ID
}

input KaraokeWhereInput {
  AND: [KaraokeWhereInput!]
  OR: [KaraokeWhereInput!]
  NOT: [KaraokeWhereInput!]
  id: IDFilter
  name: StringFilter
  webVtt: StringFilter
  quote: StringFilter
  quoteBy: StringFilter
  muteHint: BooleanFilter
  theme: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input KaraokeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  webVtt: OrderDirection
  quote: OrderDirection
  quoteBy: OrderDirection
  muteHint: OrderDirection
  theme: OrderDirection
}

input KaraokeUpdateInput {
  name: String
  webVtt: String
  quote: String
  quoteBy: String
  audio: FileFieldInput
  muteHint: Boolean
  theme: String
}

input KaraokeUpdateArgs {
  where: KaraokeWhereUniqueInput!
  data: KaraokeUpdateInput!
}

input KaraokeCreateInput {
  name: String
  webVtt: String
  quote: String
  quoteBy: String
  audio: FileFieldInput
  muteHint: Boolean
  theme: String
}

type SubtitledAudio {
  id: ID!
  name: String
  audio: FileFieldOutput
  webVtt: String
  hintText: String
  embedCode: String
}

input SubtitledAudioWhereUniqueInput {
  id: ID
}

input SubtitledAudioWhereInput {
  AND: [SubtitledAudioWhereInput!]
  OR: [SubtitledAudioWhereInput!]
  NOT: [SubtitledAudioWhereInput!]
  id: IDFilter
  name: StringFilter
  webVtt: StringFilter
  hintText: StringFilter
}

input SubtitledAudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  webVtt: OrderDirection
  hintText: OrderDirection
}

input SubtitledAudioUpdateInput {
  name: String
  audio: FileFieldInput
  webVtt: String
  hintText: String
}

input SubtitledAudioUpdateArgs {
  where: SubtitledAudioWhereUniqueInput!
  data: SubtitledAudioUpdateInput!
}

input SubtitledAudioCreateInput {
  name: String
  audio: FileFieldInput
  webVtt: String
  hintText: String
}

type ScrollToAudio {
  id: ID!
  name: String
  audioSrc: String
  startEmbedCode: String
  endEmbedCode: String
  hintEmbedCode: String
  preview: JSON
}

input ScrollToAudioWhereUniqueInput {
  id: ID
}

input ScrollToAudioWhereInput {
  AND: [ScrollToAudioWhereInput!]
  OR: [ScrollToAudioWhereInput!]
  NOT: [ScrollToAudioWhereInput!]
  id: IDFilter
  name: StringFilter
  audioSrc: StringFilter
}

input ScrollToAudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  audioSrc: OrderDirection
}

input ScrollToAudioUpdateInput {
  name: String
  audioSrc: String
}

input ScrollToAudioUpdateArgs {
  where: ScrollToAudioWhereUniqueInput!
  data: ScrollToAudioUpdateInput!
}

input ScrollToAudioCreateInput {
  name: String
  audioSrc: String
}

type ScrollableThreeModel {
  id: ID!
  name: String
  modelSrc: String
  cameraHelperData: JSON
  embedCode: String
}

input ScrollableThreeModelWhereUniqueInput {
  id: ID
}

input ScrollableThreeModelWhereInput {
  AND: [ScrollableThreeModelWhereInput!]
  OR: [ScrollableThreeModelWhereInput!]
  NOT: [ScrollableThreeModelWhereInput!]
  id: IDFilter
  name: StringFilter
  modelSrc: StringFilter
}

input ScrollableThreeModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  modelSrc: OrderDirection
}

input ScrollableThreeModelUpdateInput {
  name: String
  modelSrc: String
  cameraHelperData: JSON
}

input ScrollableThreeModelUpdateArgs {
  where: ScrollableThreeModelWhereUniqueInput!
  data: ScrollableThreeModelUpdateInput!
}

input ScrollableThreeModelCreateInput {
  name: String
  modelSrc: String
  cameraHelperData: JSON
}

type ScrollableVideo {
  id: ID!
  name: String
  videoSrc: String
  mobileVideoSrc: String
  editorState: JSON
  customCss: String
  embedCode: String
  preview: JSON
}

input ScrollableVideoWhereUniqueInput {
  id: ID
}

input ScrollableVideoWhereInput {
  AND: [ScrollableVideoWhereInput!]
  OR: [ScrollableVideoWhereInput!]
  NOT: [ScrollableVideoWhereInput!]
  id: IDFilter
  name: StringFilter
  videoSrc: StringFilter
  mobileVideoSrc: StringFilter
  customCss: StringFilter
}

input ScrollableVideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  videoSrc: OrderDirection
  mobileVideoSrc: OrderDirection
  customCss: OrderDirection
}

input ScrollableVideoUpdateInput {
  name: String
  videoSrc: String
  mobileVideoSrc: String
  editorState: JSON
  customCss: String
}

input ScrollableVideoUpdateArgs {
  where: ScrollableVideoWhereUniqueInput!
  data: ScrollableVideoUpdateInput!
}

input ScrollableVideoCreateInput {
  name: String
  videoSrc: String
  mobileVideoSrc: String
  editorState: JSON
  customCss: String
}

type ScrollableImage {
  id: ID!
  name: String
  editorState: JSON
  embedCode: String
}

input ScrollableImageWhereUniqueInput {
  id: ID
}

input ScrollableImageWhereInput {
  AND: [ScrollableImageWhereInput!]
  OR: [ScrollableImageWhereInput!]
  NOT: [ScrollableImageWhereInput!]
  id: IDFilter
  name: StringFilter
}

input ScrollableImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ScrollableImageUpdateInput {
  name: String
  editorState: JSON
}

input ScrollableImageUpdateArgs {
  where: ScrollableImageWhereUniqueInput!
  data: ScrollableImageUpdateInput!
}

input ScrollableImageCreateInput {
  name: String
  editorState: JSON
}

type ThreeModel {
  id: ID!
  name: String
  file: FileFieldOutput
  url: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ThreeModelWhereUniqueInput {
  id: ID
}

input ThreeModelWhereInput {
  AND: [ThreeModelWhereInput!]
  OR: [ThreeModelWhereInput!]
  NOT: [ThreeModelWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ThreeModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ThreeModelUpdateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ThreeModelUpdateArgs {
  where: ThreeModelWhereUniqueInput!
  data: ThreeModelUpdateInput!
}

input ThreeModelCreateInput {
  name: String
  file: FileFieldInput
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAudio(data: AudioCreateInput!): Audio
  createAudios(data: [AudioCreateInput!]!): [Audio]
  updateAudio(where: AudioWhereUniqueInput!, data: AudioUpdateInput!): Audio
  updateAudios(data: [AudioUpdateArgs!]!): [Audio]
  deleteAudio(where: AudioWhereUniqueInput!): Audio
  deleteAudios(where: [AudioWhereUniqueInput!]!): [Audio]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createKaraoke(data: KaraokeCreateInput!): Karaoke
  createKaraokes(data: [KaraokeCreateInput!]!): [Karaoke]
  updateKaraoke(where: KaraokeWhereUniqueInput!, data: KaraokeUpdateInput!): Karaoke
  updateKaraokes(data: [KaraokeUpdateArgs!]!): [Karaoke]
  deleteKaraoke(where: KaraokeWhereUniqueInput!): Karaoke
  deleteKaraokes(where: [KaraokeWhereUniqueInput!]!): [Karaoke]
  createSubtitledAudio(data: SubtitledAudioCreateInput!): SubtitledAudio
  createSubtitledAudios(data: [SubtitledAudioCreateInput!]!): [SubtitledAudio]
  updateSubtitledAudio(where: SubtitledAudioWhereUniqueInput!, data: SubtitledAudioUpdateInput!): SubtitledAudio
  updateSubtitledAudios(data: [SubtitledAudioUpdateArgs!]!): [SubtitledAudio]
  deleteSubtitledAudio(where: SubtitledAudioWhereUniqueInput!): SubtitledAudio
  deleteSubtitledAudios(where: [SubtitledAudioWhereUniqueInput!]!): [SubtitledAudio]
  createScrollToAudio(data: ScrollToAudioCreateInput!): ScrollToAudio
  createScrollToAudios(data: [ScrollToAudioCreateInput!]!): [ScrollToAudio]
  updateScrollToAudio(where: ScrollToAudioWhereUniqueInput!, data: ScrollToAudioUpdateInput!): ScrollToAudio
  updateScrollToAudios(data: [ScrollToAudioUpdateArgs!]!): [ScrollToAudio]
  deleteScrollToAudio(where: ScrollToAudioWhereUniqueInput!): ScrollToAudio
  deleteScrollToAudios(where: [ScrollToAudioWhereUniqueInput!]!): [ScrollToAudio]
  createScrollableThreeModel(data: ScrollableThreeModelCreateInput!): ScrollableThreeModel
  createScrollableThreeModels(data: [ScrollableThreeModelCreateInput!]!): [ScrollableThreeModel]
  updateScrollableThreeModel(where: ScrollableThreeModelWhereUniqueInput!, data: ScrollableThreeModelUpdateInput!): ScrollableThreeModel
  updateScrollableThreeModels(data: [ScrollableThreeModelUpdateArgs!]!): [ScrollableThreeModel]
  deleteScrollableThreeModel(where: ScrollableThreeModelWhereUniqueInput!): ScrollableThreeModel
  deleteScrollableThreeModels(where: [ScrollableThreeModelWhereUniqueInput!]!): [ScrollableThreeModel]
  createScrollableVideo(data: ScrollableVideoCreateInput!): ScrollableVideo
  createScrollableVideos(data: [ScrollableVideoCreateInput!]!): [ScrollableVideo]
  updateScrollableVideo(where: ScrollableVideoWhereUniqueInput!, data: ScrollableVideoUpdateInput!): ScrollableVideo
  updateScrollableVideos(data: [ScrollableVideoUpdateArgs!]!): [ScrollableVideo]
  deleteScrollableVideo(where: ScrollableVideoWhereUniqueInput!): ScrollableVideo
  deleteScrollableVideos(where: [ScrollableVideoWhereUniqueInput!]!): [ScrollableVideo]
  createScrollableImage(data: ScrollableImageCreateInput!): ScrollableImage
  createScrollableImages(data: [ScrollableImageCreateInput!]!): [ScrollableImage]
  updateScrollableImage(where: ScrollableImageWhereUniqueInput!, data: ScrollableImageUpdateInput!): ScrollableImage
  updateScrollableImages(data: [ScrollableImageUpdateArgs!]!): [ScrollableImage]
  deleteScrollableImage(where: ScrollableImageWhereUniqueInput!): ScrollableImage
  deleteScrollableImages(where: [ScrollableImageWhereUniqueInput!]!): [ScrollableImage]
  createThreeModel(data: ThreeModelCreateInput!): ThreeModel
  createThreeModels(data: [ThreeModelCreateInput!]!): [ThreeModel]
  updateThreeModel(where: ThreeModelWhereUniqueInput!, data: ThreeModelUpdateInput!): ThreeModel
  updateThreeModels(data: [ThreeModelUpdateArgs!]!): [ThreeModel]
  deleteThreeModel(where: ThreeModelWhereUniqueInput!): ThreeModel
  deleteThreeModels(where: [ThreeModelWhereUniqueInput!]!): [ThreeModel]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  audios(where: AudioWhereInput! = {}, orderBy: [AudioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AudioWhereUniqueInput): [Audio!]
  audio(where: AudioWhereUniqueInput!): Audio
  audiosCount(where: AudioWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  asset(where: AssetWhereUniqueInput!): Asset
  assetsCount(where: AssetWhereInput! = {}): Int
  karaokes(where: KaraokeWhereInput! = {}, orderBy: [KaraokeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KaraokeWhereUniqueInput): [Karaoke!]
  karaoke(where: KaraokeWhereUniqueInput!): Karaoke
  karaokesCount(where: KaraokeWhereInput! = {}): Int
  subtitledAudios(where: SubtitledAudioWhereInput! = {}, orderBy: [SubtitledAudioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubtitledAudioWhereUniqueInput): [SubtitledAudio!]
  subtitledAudio(where: SubtitledAudioWhereUniqueInput!): SubtitledAudio
  subtitledAudiosCount(where: SubtitledAudioWhereInput! = {}): Int
  scrollToAudios(where: ScrollToAudioWhereInput! = {}, orderBy: [ScrollToAudioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScrollToAudioWhereUniqueInput): [ScrollToAudio!]
  scrollToAudio(where: ScrollToAudioWhereUniqueInput!): ScrollToAudio
  scrollToAudiosCount(where: ScrollToAudioWhereInput! = {}): Int
  scrollableThreeModels(where: ScrollableThreeModelWhereInput! = {}, orderBy: [ScrollableThreeModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScrollableThreeModelWhereUniqueInput): [ScrollableThreeModel!]
  scrollableThreeModel(where: ScrollableThreeModelWhereUniqueInput!): ScrollableThreeModel
  scrollableThreeModelsCount(where: ScrollableThreeModelWhereInput! = {}): Int
  scrollableVideos(where: ScrollableVideoWhereInput! = {}, orderBy: [ScrollableVideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScrollableVideoWhereUniqueInput): [ScrollableVideo!]
  scrollableVideo(where: ScrollableVideoWhereUniqueInput!): ScrollableVideo
  scrollableVideosCount(where: ScrollableVideoWhereInput! = {}): Int
  scrollableImages(where: ScrollableImageWhereInput! = {}, orderBy: [ScrollableImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScrollableImageWhereUniqueInput): [ScrollableImage!]
  scrollableImage(where: ScrollableImageWhereUniqueInput!): ScrollableImage
  scrollableImagesCount(where: ScrollableImageWhereInput! = {}): Int
  threeModels(where: ThreeModelWhereInput! = {}, orderBy: [ThreeModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ThreeModelWhereUniqueInput): [ThreeModel!]
  threeModel(where: ThreeModelWhereUniqueInput!): ThreeModel
  threeModelsCount(where: ThreeModelWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
